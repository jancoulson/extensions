diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt
index 9a2ee90..851af89 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt
@@ -51,6 +51,7 @@ class MusicEvents(private val reactContext: ReactContext) : BroadcastReceiver()
         const val METADATA_TIMED_RECEIVED = "metadata-timed-received"
         const val METADATA_COMMON_RECEIVED = "metadata-common-received"
         const val METADATA_PAYLOAD_KEY = "metadata"
+        const val NOW_PLAYING_METADATA_CHANGED = "now-playing-metadata-changed"
 
         // Other
         const val PLAYER_ERROR = "player-error"
diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
index b2409a0..5240ef8 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
@@ -371,9 +371,17 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
             callback.reject("no_current_item", "There is no current item in the player")
 
         musicService.clearNotificationMetadata()
+        musicService.updateNowPlayingMetadata(bundleToTrack(Bundle()))
         callback.resolve(null)
     }
 
+    @ReactMethod
+    fun getNowPlayingMetadata(callback: Promise) = scope.launch {
+        if (verifyServiceBoundOrReject(callback)) return@launch
+
+        callback.resolve(Arguments.fromBundle(musicService.getNowPlayingMetadata()))
+    }
+
     @ReactMethod
     fun removeUpcomingTracks(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt
index 9d6d869..a400b26 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt
@@ -46,6 +46,7 @@ class MusicService : HeadlessJsTaskService() {
     private val binder = MusicBinder()
     private val scope = MainScope()
     private var progressUpdateJob: Job? = null
+    private var nowPlayingMetadata: Bundle? = Bundle()
 
     /**
      * Use [appKilledPlaybackBehavior] instead.
@@ -434,6 +435,13 @@ class MusicService : HeadlessJsTaskService() {
     @MainThread
     fun updateNowPlayingMetadata(track: Track) {
         player.notificationManager.overrideMetadata(track.toAudioItem())
+
+        nowPlayingMetadata = track.originalItem
+
+        val eventPayload = Bundle()
+        eventPayload.putBundle("metadata", nowPlayingMetadata!!.clone() as Bundle)
+
+        emit(MusicEvents.NOW_PLAYING_METADATA_CHANGED, eventPayload);
     }
 
     @MainThread
@@ -441,6 +449,11 @@ class MusicService : HeadlessJsTaskService() {
         player.notificationManager.hideNotification()
     }
 
+    @MainThread
+    fun getNowPlayingMetadata(): Bundle {
+        return nowPlayingMetadata ?: Bundle()
+    }
+
     private fun emitPlaybackTrackChangedEvents(
         index: Int?,
         previousIndex: Int?,
diff --git a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift
index 3be1342..38e5783 100644
--- a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift
+++ b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift
@@ -26,6 +26,7 @@ public class RNTrackPlayer: RCTEventEmitter, AudioSessionControllerDelegate {
     private var sessionCategoryMode: AVAudioSession.Mode = .default
     private var sessionCategoryPolicy: AVAudioSession.RouteSharingPolicy = .default
     private var sessionCategoryOptions: AVAudioSession.CategoryOptions = []
+    private var nowPlayingMetadata: [String: Any] = [:]
 
     // MARK: - Lifecycle Methods
 
@@ -754,6 +755,11 @@ public class RNTrackPlayer: RCTEventEmitter, AudioSessionControllerDelegate {
 
         player.nowPlayingInfoController.clear()
         resolve(NSNull())
+
+        nowPlayingMetadata = [:]
+        emit(event: EventType.NowPlayingMetadataChanged, body: [
+                "metadata": [:],
+            ] as [String : Any])
     }
 
     @objc(updateNowPlayingMetadata:resolver:rejecter:)
@@ -761,9 +767,22 @@ public class RNTrackPlayer: RCTEventEmitter, AudioSessionControllerDelegate {
         if (rejectWhenNotInitialized(reject: reject)) { return }
 
         Metadata.update(for: player, with: metadata)
+
+        nowPlayingMetadata = metadata
+        emit(event: EventType.NowPlayingMetadataChanged, body: [
+                "metadata": metadata,
+            ] as [String : Any])
+
         resolve(NSNull())
     }
 
+    @objc(getNowPlayingMetadata:rejecter:)
+    public func getNowPlayingMetadata(resolve: RCTPromiseResolveBlock, reject: RCTPromiseRejectBlock) {
+        if (rejectWhenNotInitialized(reject: reject)) { return }
+
+        resolve((nowPlayingMetadata))
+    }
+
     private func getPlaybackStateErrorKeyValues() -> Dictionary<String, Any> {
         switch player.playbackError {
             case .failedToLoadKeyValue: return [
diff --git a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m
index 7741994..a6e3e0b 100644
--- a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m
+++ b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m
@@ -164,4 +164,7 @@ @interface RCT_EXTERN_REMAP_MODULE(TrackPlayerModule, RNTrackPlayer, NSObject)
 RCT_EXTERN_METHOD(clearSleepTimer:(RCTPromiseResolveBlock)resolve
               rejecter:(RCTPromiseRejectBlock)reject);
 
+RCT_EXTERN_METHOD(getNowPlayingMetadata:(RCTPromiseResolveBlock)resolve
+                  rejecter:(RCTPromiseRejectBlock)reject);
+
 @end
diff --git a/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift b/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift
index 6226222..f8273e6 100644
--- a/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift
+++ b/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift
@@ -26,6 +26,7 @@ enum EventType: String, CaseIterable {
     case MetadataChapterReceived = "metadata-chapter-received"
     case MetadataTimedReceived = "metadata-timed-received"
     case MetadataCommonReceived = "metadata-common-received"
+    case NowPlayingMetadataChanged = "now-playing-metadata-changed"
     
     static func allRawValues() -> [String] {
         return allCases.map { $0.rawValue }
diff --git a/node_modules/react-native-track-player/lib/src/constants/Event.d.ts b/node_modules/react-native-track-player/lib/src/constants/Event.d.ts
index 1abe541..2076619 100644
--- a/node_modules/react-native-track-player/lib/src/constants/Event.d.ts
+++ b/node_modules/react-native-track-player/lib/src/constants/Event.d.ts
@@ -129,5 +129,9 @@ export declare enum Event {
      * Fired when common (static) metadata is received.
      * See https://rntp.dev/docs/api/events#commonmetadatareceived
      **/
-    MetadataCommonReceived = "metadata-common-received"
+    MetadataCommonReceived = "metadata-common-received",
+    /**
+     * Fired when metadata of active track has changed.
+     **/
+    NowPlayingMetadataChanged = "now-playing-metadata-changed"
 }
diff --git a/node_modules/react-native-track-player/lib/src/constants/Event.js b/node_modules/react-native-track-player/lib/src/constants/Event.js
index 9a5676d..9dc1caa 100644
--- a/node_modules/react-native-track-player/lib/src/constants/Event.js
+++ b/node_modules/react-native-track-player/lib/src/constants/Event.js
@@ -131,4 +131,8 @@ export var Event;
      * See https://rntp.dev/docs/api/events#commonmetadatareceived
      **/
     Event["MetadataCommonReceived"] = "metadata-common-received";
+    /**
+     * Fired when metadata of active track has changed.
+     **/
+    Event["NowPlayingMetadataChanged"] = "now-playing-metadata-changed";
 })(Event || (Event = {}));
diff --git a/node_modules/react-native-track-player/lib/src/hooks/index.d.ts b/node_modules/react-native-track-player/lib/src/hooks/index.d.ts
index c914e68..1140419 100644
--- a/node_modules/react-native-track-player/lib/src/hooks/index.d.ts
+++ b/node_modules/react-native-track-player/lib/src/hooks/index.d.ts
@@ -4,3 +4,4 @@ export * from './usePlayWhenReady';
 export * from './usePlaybackState';
 export * from './useProgress';
 export * from './useTrackPlayerEvents';
+export * from './useNowPlayingMetadata';
diff --git a/node_modules/react-native-track-player/lib/src/hooks/index.js b/node_modules/react-native-track-player/lib/src/hooks/index.js
index c914e68..1140419 100644
--- a/node_modules/react-native-track-player/lib/src/hooks/index.js
+++ b/node_modules/react-native-track-player/lib/src/hooks/index.js
@@ -4,3 +4,4 @@ export * from './usePlayWhenReady';
 export * from './usePlaybackState';
 export * from './useProgress';
 export * from './useTrackPlayerEvents';
+export * from './useNowPlayingMetadata';
diff --git a/node_modules/react-native-track-player/lib/src/hooks/useNowPlayingMetadata.d.ts b/node_modules/react-native-track-player/lib/src/hooks/useNowPlayingMetadata.d.ts
new file mode 100644
index 0000000..bf2479d
--- /dev/null
+++ b/node_modules/react-native-track-player/lib/src/hooks/useNowPlayingMetadata.d.ts
@@ -0,0 +1,2 @@
+import { NowPlayingMetadata } from '../interfaces';
+export declare const useNowPlayingMetadata: () => NowPlayingMetadata | undefined;
diff --git a/node_modules/react-native-track-player/lib/src/hooks/useNowPlayingMetadata.js b/node_modules/react-native-track-player/lib/src/hooks/useNowPlayingMetadata.js
new file mode 100644
index 0000000..193934f
--- /dev/null
+++ b/node_modules/react-native-track-player/lib/src/hooks/useNowPlayingMetadata.js
@@ -0,0 +1,24 @@
+import { useEffect, useState } from 'react';
+import { Event } from '../constants';
+import { useTrackPlayerEvents } from './useTrackPlayerEvents';
+import TrackPlayer from '..';
+export const useNowPlayingMetadata = () => {
+    const [metadata, setMetadata] = useState();
+    useEffect(() => {
+        let unmounted = false;
+        if (unmounted)
+            return;
+        TrackPlayer.getNowPlayingMetadata()
+            .then(setMetadata)
+            .catch(() => {
+            /** Only throws while you haven't yet setup, ignore failure. */
+        });
+        return () => {
+            unmounted = true;
+        };
+    }, []);
+    useTrackPlayerEvents([Event.NowPlayingMetadataChanged], async (event) => {
+        setMetadata(event.metadata);
+    });
+    return metadata;
+};
diff --git a/node_modules/react-native-track-player/lib/src/interfaces/events/EventPayloadByEvent.d.ts b/node_modules/react-native-track-player/lib/src/interfaces/events/EventPayloadByEvent.d.ts
index 0008236..fb5480e 100644
--- a/node_modules/react-native-track-player/lib/src/interfaces/events/EventPayloadByEvent.d.ts
+++ b/node_modules/react-native-track-player/lib/src/interfaces/events/EventPayloadByEvent.d.ts
@@ -18,6 +18,7 @@ import type { RemotePlaySearchEvent } from './RemotePlaySearchEvent';
 import type { RemoteSeekEvent } from './RemoteSeekEvent';
 import type { RemoteSetRatingEvent } from './RemoteSetRatingEvent';
 import type { RemoteSkipEvent } from './RemoteSkipEvent';
+import type { NowPlayingMetadataChangedEvent } from './NowPlayingMetadataChangedEvent';
 export type EventPayloadByEvent = {
     [Event.PlayerError]: PlayerErrorEvent;
     [Event.PlaybackState]: PlaybackState;
@@ -47,6 +48,7 @@ export type EventPayloadByEvent = {
     [Event.MetadataChapterReceived]: AudioMetadataReceivedEvent;
     [Event.MetadataTimedReceived]: AudioMetadataReceivedEvent;
     [Event.MetadataCommonReceived]: AudioCommonMetadataReceivedEvent;
+    [Event.NowPlayingMetadataChanged]: NowPlayingMetadataChangedEvent;
 };
 type Simplify<T> = {
     [KeyType in keyof T]: T[KeyType];
diff --git a/node_modules/react-native-track-player/lib/src/interfaces/events/NowPlayingMetadataChangedEvent.d.ts b/node_modules/react-native-track-player/lib/src/interfaces/events/NowPlayingMetadataChangedEvent.d.ts
new file mode 100644
index 0000000..77e65fb
--- /dev/null
+++ b/node_modules/react-native-track-player/lib/src/interfaces/events/NowPlayingMetadataChangedEvent.d.ts
@@ -0,0 +1,4 @@
+import type { NowPlayingMetadata } from "../NowPlayingMetadata";
+export interface NowPlayingMetadataChangedEvent {
+    metadata: NowPlayingMetadata;
+}
diff --git a/node_modules/react-native-track-player/lib/src/interfaces/events/NowPlayingMetadataChangedEvent.js b/node_modules/react-native-track-player/lib/src/interfaces/events/NowPlayingMetadataChangedEvent.js
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/react-native-track-player/lib/src/interfaces/events/NowPlayingMetadataChangedEvent.js
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/react-native-track-player/lib/src/interfaces/events/index.d.ts b/node_modules/react-native-track-player/lib/src/interfaces/events/index.d.ts
index 92b5df2..c4421ca 100644
--- a/node_modules/react-native-track-player/lib/src/interfaces/events/index.d.ts
+++ b/node_modules/react-native-track-player/lib/src/interfaces/events/index.d.ts
@@ -14,3 +14,4 @@ export * from './RemotePlaySearchEvent';
 export * from './RemoteSeekEvent';
 export * from './RemoteSetRatingEvent';
 export * from './RemoteSkipEvent';
+export * from './NowPlayingMetadataChangedEvent';
diff --git a/node_modules/react-native-track-player/lib/src/interfaces/events/index.js b/node_modules/react-native-track-player/lib/src/interfaces/events/index.js
index 92b5df2..c4421ca 100644
--- a/node_modules/react-native-track-player/lib/src/interfaces/events/index.js
+++ b/node_modules/react-native-track-player/lib/src/interfaces/events/index.js
@@ -14,3 +14,4 @@ export * from './RemotePlaySearchEvent';
 export * from './RemoteSeekEvent';
 export * from './RemoteSetRatingEvent';
 export * from './RemoteSkipEvent';
+export * from './NowPlayingMetadataChangedEvent';
diff --git a/node_modules/react-native-track-player/lib/src/trackPlayer.d.ts b/node_modules/react-native-track-player/lib/src/trackPlayer.d.ts
index 574f7ea..6d54180 100644
--- a/node_modules/react-native-track-player/lib/src/trackPlayer.d.ts
+++ b/node_modules/react-native-track-player/lib/src/trackPlayer.d.ts
@@ -120,6 +120,10 @@ export declare function clearNowPlayingMetadata(): Promise<void>;
  * without affecting the data stored for the current track.
  */
 export declare function updateNowPlayingMetadata(metadata: NowPlayingMetadata): Promise<void>;
+/**
+ * Gets the metadata content of the notification (Android) and the Now Playing Center (iOS).
+ */
+export declare function getNowPlayingMetadata(): Promise<NowPlayingMetadata | undefined>;
 /**
  * Resets the player stopping the current track and clearing the queue.
  */
diff --git a/node_modules/react-native-track-player/lib/src/trackPlayer.js b/node_modules/react-native-track-player/lib/src/trackPlayer.js
index 250cdbb..f0a50ce 100644
--- a/node_modules/react-native-track-player/lib/src/trackPlayer.js
+++ b/node_modules/react-native-track-player/lib/src/trackPlayer.js
@@ -175,6 +175,12 @@ export function updateNowPlayingMetadata(metadata) {
         artwork: resolveImportedAssetOrPath(metadata.artwork),
     });
 }
+/**
+ * Gets the metadata content of the notification (Android) and the Now Playing Center (iOS).
+ */
+export async function getNowPlayingMetadata() {
+    return (await TrackPlayer.getNowPlayingMetadata()) ?? undefined;
+}
 // MARK: - Player API
 /**
  * Resets the player stopping the current track and clearing the queue.
diff --git a/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.d.ts b/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.d.ts
index 9e2e6fd..9011358 100644
--- a/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.d.ts
+++ b/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.d.ts
@@ -25,6 +25,7 @@ export declare class PlaylistPlayer extends Player {
     reset(): Promise<void>;
     removeUpcomingTracks(): Promise<void>;
     move(fromIndex: number, toIndex: number): Promise<void>;
+    setQueue(queue: Track[]): Promise<void>;
     updateMetadataForTrack(index: number, metadata: Partial<Track>): void;
     clearNowPlayingMetadata(): void;
     updateNowPlayingMetadata(metadata: Partial<Track>): void;
diff --git a/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js b/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js
index b36ad21..cd97ed4 100644
--- a/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js
+++ b/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js
@@ -24,6 +24,9 @@ export class PlaylistPlayer extends Player {
                 if (this.currentIndex === this.playlist.length - 1) {
                     await this.goToIndex(0);
                 }
+                else {
+                    await this.skipToNext();
+                }
                 break;
             default:
                 try {
@@ -64,7 +67,7 @@ export class PlaylistPlayer extends Player {
         }
     }
     async add(tracks, insertBeforeIndex) {
-        if (insertBeforeIndex) {
+        if (insertBeforeIndex !== -1 && insertBeforeIndex !== undefined) {
             this.playlist.splice(insertBeforeIndex, 0, ...tracks);
         }
         else {
@@ -168,6 +171,11 @@ export class PlaylistPlayer extends Player {
             this.currentIndex = this.currentIndex + shift;
         }
     }
+    async setQueue(queue) {
+        this.playlist = queue;
+        this.currentIndex === undefined;
+        await this.goToIndex(0);
+    }
     // TODO
     // eslint-disable-next-line @typescript-eslint/no-empty-function
     updateMetadataForTrack(index, metadata) { }
diff --git a/node_modules/react-native-track-player/lib/web/TrackPlayerModule.d.ts b/node_modules/react-native-track-player/lib/web/TrackPlayerModule.d.ts
index 6766a2a..8c54fab 100644
--- a/node_modules/react-native-track-player/lib/web/TrackPlayerModule.d.ts
+++ b/node_modules/react-native-track-player/lib/web/TrackPlayerModule.d.ts
@@ -50,7 +50,9 @@ export declare class TrackPlayerModule extends PlaylistPlayer {
     getPlayWhenReady(): boolean;
     setPlayWhenReady(pwr: boolean): boolean;
     load(track: Track): Promise<void>;
+    reset(): Promise<void>;
     getQueue(): Track[];
+    setQueue(queue: Track[]): Promise<void>;
     getActiveTrack(): Track | undefined;
     getActiveTrackIndex(): number | undefined;
     /**
diff --git a/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js b/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js
index 1f10a40..3bd07d2 100644
--- a/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js
+++ b/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js
@@ -51,6 +51,13 @@ export class TrackPlayerModule extends PlaylistPlayer {
     set state(newState) {
         super.state = newState;
         this.emitter.emit(Event.PlaybackState, newState);
+        if (this.state.state === State.Playing) {
+            const progress = this.getProgress();
+            this.emitter.emit(Event.PlaybackProgressUpdated, {
+                ...progress,
+                track: this.currentIndex,
+            });
+        }
     }
     async updateOptions(options) {
         this.setupProgressUpdates(options.progressUpdateEventInterval);
@@ -123,9 +130,37 @@ export class TrackPlayerModule extends PlaylistPlayer {
             track,
         });
     }
+    async reset() {
+        if (!this.element)
+            throw new SetupNotCalledError();
+        const lastTrack = this.current;
+        const lastPosition = this.element.currentTime;
+        await super.reset();
+        this.emitter.emit(Event.PlaybackActiveTrackChanged, {
+            lastTrack,
+            lastPosition,
+            lastIndex: this.lastIndex,
+            index: this.currentIndex,
+            track: null,
+        });
+    }
     getQueue() {
         return this.playlist;
     }
+    async setQueue(queue) {
+        if (!this.element)
+            throw new SetupNotCalledError();
+        const lastTrack = this.current;
+        const lastPosition = this.element.currentTime;
+        await super.setQueue(queue);
+        this.emitter.emit(Event.PlaybackActiveTrackChanged, {
+            lastTrack,
+            lastPosition,
+            lastIndex: this.lastIndex,
+            index: 0,
+            track: this.playlist[0],
+        });
+    }
     getActiveTrack() {
         return this.current;
     }
@@ -146,4 +181,3 @@ export class TrackPlayerModule extends PlaylistPlayer {
         return this.state;
     }
 }
-;
diff --git a/node_modules/react-native-track-player/src/constants/Event.ts b/node_modules/react-native-track-player/src/constants/Event.ts
index 0914946..e84c0b8 100644
--- a/node_modules/react-native-track-player/src/constants/Event.ts
+++ b/node_modules/react-native-track-player/src/constants/Event.ts
@@ -131,4 +131,8 @@ export enum Event {
    * See https://rntp.dev/docs/api/events#commonmetadatareceived
    **/
   MetadataCommonReceived = 'metadata-common-received',
+  /**
+   * Fired when metadata of active track has changed.
+   **/
+  NowPlayingMetadataChanged = 'now-playing-metadata-changed',
 }
diff --git a/node_modules/react-native-track-player/src/hooks/index.ts b/node_modules/react-native-track-player/src/hooks/index.ts
index c914e68..566f580 100644
--- a/node_modules/react-native-track-player/src/hooks/index.ts
+++ b/node_modules/react-native-track-player/src/hooks/index.ts
@@ -4,3 +4,5 @@ export * from './usePlayWhenReady';
 export * from './usePlaybackState';
 export * from './useProgress';
 export * from './useTrackPlayerEvents';
+export * from './useNowPlayingMetadata';
+
diff --git a/node_modules/react-native-track-player/src/hooks/useNowPlayingMetadata.ts b/node_modules/react-native-track-player/src/hooks/useNowPlayingMetadata.ts
new file mode 100644
index 0000000..2de1058
--- /dev/null
+++ b/node_modules/react-native-track-player/src/hooks/useNowPlayingMetadata.ts
@@ -0,0 +1,34 @@
+import { useEffect, useState } from 'react';
+import { Event } from '../constants';
+import { useTrackPlayerEvents } from './useTrackPlayerEvents';
+import { NowPlayingMetadata } from '../interfaces';
+import TrackPlayer from '..';
+
+export const useNowPlayingMetadata = (): NowPlayingMetadata | undefined => {
+  const [metadata, setMetadata] = useState<NowPlayingMetadata | undefined>();
+
+  useEffect(() => {
+    let unmounted = false;
+
+    if (unmounted) return;
+
+    TrackPlayer.getNowPlayingMetadata()
+    .then(setMetadata)
+      .catch(() => {
+        /** Only throws while you haven't yet setup, ignore failure. */
+      });
+
+      return () => {
+        unmounted = true;
+      };
+  }, [])
+
+  useTrackPlayerEvents(
+    [Event.NowPlayingMetadataChanged],
+    async (event) => {
+      setMetadata(event.metadata);
+    }
+  );
+
+  return metadata;
+};
diff --git a/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts b/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts
index a9d1192..a16bf59 100644
--- a/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts
+++ b/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts
@@ -19,6 +19,7 @@ import type { RemotePlaySearchEvent } from './RemotePlaySearchEvent';
 import type { RemoteSeekEvent } from './RemoteSeekEvent';
 import type { RemoteSetRatingEvent } from './RemoteSetRatingEvent';
 import type { RemoteSkipEvent } from './RemoteSkipEvent';
+import type { NowPlayingMetadataChangedEvent } from './NowPlayingMetadataChangedEvent';
 
 export type EventPayloadByEvent = {
   [Event.PlayerError]: PlayerErrorEvent;
@@ -49,6 +50,7 @@ export type EventPayloadByEvent = {
   [Event.MetadataChapterReceived]: AudioMetadataReceivedEvent;
   [Event.MetadataTimedReceived]: AudioMetadataReceivedEvent;
   [Event.MetadataCommonReceived]: AudioCommonMetadataReceivedEvent;
+  [Event.NowPlayingMetadataChanged]: NowPlayingMetadataChangedEvent;
 };
 
 // eslint-disable-next-line
diff --git a/node_modules/react-native-track-player/src/interfaces/events/NowPlayingMetadataChangedEvent.ts b/node_modules/react-native-track-player/src/interfaces/events/NowPlayingMetadataChangedEvent.ts
new file mode 100644
index 0000000..183fc95
--- /dev/null
+++ b/node_modules/react-native-track-player/src/interfaces/events/NowPlayingMetadataChangedEvent.ts
@@ -0,0 +1,5 @@
+import type { NowPlayingMetadata } from "../NowPlayingMetadata";
+
+export interface NowPlayingMetadataChangedEvent {
+  metadata: NowPlayingMetadata;
+}
diff --git a/node_modules/react-native-track-player/src/interfaces/events/index.ts b/node_modules/react-native-track-player/src/interfaces/events/index.ts
index 92b5df2..c4421ca 100644
--- a/node_modules/react-native-track-player/src/interfaces/events/index.ts
+++ b/node_modules/react-native-track-player/src/interfaces/events/index.ts
@@ -14,3 +14,4 @@ export * from './RemotePlaySearchEvent';
 export * from './RemoteSeekEvent';
 export * from './RemoteSetRatingEvent';
 export * from './RemoteSkipEvent';
+export * from './NowPlayingMetadataChangedEvent';
diff --git a/node_modules/react-native-track-player/src/trackPlayer.ts b/node_modules/react-native-track-player/src/trackPlayer.ts
index 340c1b1..1e4e60f 100644
--- a/node_modules/react-native-track-player/src/trackPlayer.ts
+++ b/node_modules/react-native-track-player/src/trackPlayer.ts
@@ -281,6 +281,13 @@ export function updateNowPlayingMetadata(
   });
 }
 
+/**
+ * Gets the metadata content of the notification (Android) and the Now Playing Center (iOS).
+ */
+export async function getNowPlayingMetadata(): Promise<NowPlayingMetadata | undefined> {
+  return (await TrackPlayer.getNowPlayingMetadata()) ?? undefined;
+}
+
 // MARK: - Player API
 
 /**
diff --git a/node_modules/react-native-track-player/web/TrackPlayer/Player.ts b/node_modules/react-native-track-player/web/TrackPlayer/Player.ts
index e537c2a..83d3bed 100644
--- a/node_modules/react-native-track-player/web/TrackPlayer/Player.ts
+++ b/node_modules/react-native-track-player/web/TrackPlayer/Player.ts
@@ -3,11 +3,11 @@ import type { Track, Progress, PlaybackState } from '../../src/interfaces';
 import { SetupNotCalledError } from './SetupNotCalledError';
 
 export class Player {
-  protected hasInitialized: boolean = false;
+  protected hasInitialized = false;
   protected element?: HTMLMediaElement;
   protected player?: shaka.Player;
   protected _current?: Track = undefined;
-  protected _playWhenReady: boolean = false;
+  protected _playWhenReady = false;
   protected _state: PlaybackState = { state: State.None };
 
   // current getter/setter
diff --git a/node_modules/react-native-track-player/web/TrackPlayer/PlaylistPlayer.ts b/node_modules/react-native-track-player/web/TrackPlayer/PlaylistPlayer.ts
index b2d6697..36caee5 100644
--- a/node_modules/react-native-track-player/web/TrackPlayer/PlaylistPlayer.ts
+++ b/node_modules/react-native-track-player/web/TrackPlayer/PlaylistPlayer.ts
@@ -29,6 +29,8 @@ export class PlaylistPlayer extends Player {
       case RepeatMode.Playlist:
         if (this.currentIndex === this.playlist.length - 1) {
           await this.goToIndex(0);
+        } else {
+          await this.skipToNext();
         }
         break;
       default:
@@ -38,7 +40,6 @@ export class PlaylistPlayer extends Player {
           if ((err as Error).message !== 'playlist_exhausted') {
             throw err;
           }
-
           this.onPlaylistEnded();
         }
         break;
@@ -79,7 +80,7 @@ export class PlaylistPlayer extends Player {
   }
 
   public async add(tracks: Track[], insertBeforeIndex?: number) {
-    if (insertBeforeIndex) {
+    if (insertBeforeIndex !== -1 && insertBeforeIndex !== undefined) {
       this.playlist.splice(insertBeforeIndex, 0, ...tracks);
     } else {
       this.playlist.push(...tracks);
@@ -203,6 +204,12 @@ export class PlaylistPlayer extends Player {
     }
   }
 
+  public async setQueue(queue: Track[]) {
+    this.playlist = queue;
+    this.currentIndex === undefined
+    await this.goToIndex(0);
+  }
+
   // TODO
   // eslint-disable-next-line @typescript-eslint/no-empty-function
   public updateMetadataForTrack(index: number, metadata: Partial<Track>) {}
diff --git a/node_modules/react-native-track-player/web/TrackPlayerModule.ts b/node_modules/react-native-track-player/web/TrackPlayerModule.ts
index 9d198a1..0a10361 100644
--- a/node_modules/react-native-track-player/web/TrackPlayerModule.ts
+++ b/node_modules/react-native-track-player/web/TrackPlayerModule.ts
@@ -148,10 +148,42 @@ export class TrackPlayerModule extends PlaylistPlayer {
     });
   }
 
+  public async reset() {
+    if (!this.element) throw new SetupNotCalledError();
+    const lastTrack = this.current;
+    const lastPosition = this.element.currentTime;
+    
+    await super.reset();
+
+    this.emitter.emit(Event.PlaybackActiveTrackChanged, {
+      lastTrack,
+      lastPosition,
+      lastIndex: this.lastIndex,
+      index: this.currentIndex,
+      track: null,
+    });
+  }
+
   public getQueue(): Track[] {
     return this.playlist;
   }
 
+  public async setQueue(queue: Track[]) {
+    if (!this.element) throw new SetupNotCalledError();
+    const lastTrack = this.current;
+    const lastPosition = this.element.currentTime;
+
+    await super.setQueue(queue);
+
+    this.emitter.emit(Event.PlaybackActiveTrackChanged, {
+      lastTrack,
+      lastPosition,
+      lastIndex: this.lastIndex,
+      index: 0,
+      track: this.playlist[0],
+    });
+  }
+
   public getActiveTrack(): Track | undefined {
     return this.current;
   }
@@ -173,4 +205,6 @@ export class TrackPlayerModule extends PlaylistPlayer {
   public getPlaybackState(): PlaybackState {
     return this.state;
   }
-};
+
+  
+}
